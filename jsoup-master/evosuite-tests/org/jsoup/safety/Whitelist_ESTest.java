/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 02:42:12 GMT 2024
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("g\"g");
      Elements elements0 = document0.getElementsByAttributeValue("g\"g", "g\"g");
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("g\"g");
      boolean boolean0 = whitelist_TagName0.equals(elements0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("");
      boolean boolean0 = whitelist_Protocol0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0OVY.M2:#[2)cN0";
      stringArray0[1] = "0OVY.M2:#[2)cN0";
      stringArray0[2] = "0OVY.M2:#[2)cN0";
      stringArray0[3] = "0OVY.M2:#[2)cN0";
      stringArray0[4] = "0OVY.M2:#[2)cN0";
      Whitelist whitelist1 = whitelist0.addProtocols("0OVY.M2:#[2)cN0", "0OVY.M2:#[2)cN0", stringArray0);
      whitelist1.addAttributes("0OVY.M2:#[2)cN0", stringArray0);
      Document document0 = Document.createShell("abbr");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("0OVY.M2:#[2)cN0", "0OVY.M2:#[2)cN0", attributes0);
      whitelist0.preserveRelativeLinks(true);
      boolean boolean0 = whitelist1.isSafeAttribute("0OVY.M2:#[2)cN0", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p";
      stringArray0[1] = "strong";
      stringArray0[2] = "|3<k2~. n";
      whitelist0.addAttributes(":all", stringArray0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("strong", parseSettings0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("GX9PaeTE4!L0Mj*_qJq");
      Element element0 = new Element(tag0, "nkpnUn", attributes0);
      Attribute attribute0 = new Attribute("p", "nkpnUn");
      boolean boolean0 = whitelist0.isSafeAttribute("strong", element0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      whitelist0.addEnforcedAttribute("rt", "rt", "=1o.sE-Ge16S+V^q{7");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("=1o.sE-Ge16S+V^q{7", parseSettings0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("=rZvnVC[@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "rt", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("rt", "rt");
      attribute0.setKey("org.jsoup.nodes.CDataNode");
      boolean boolean0 = whitelist0.isSafeAttribute("rt", pseudoTextElement0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0OVY.M2:#[2)cN0";
      stringArray0[1] = "0OVY.M2:#[2)cN0";
      stringArray0[2] = "0OVY.M2:#[2)cN0";
      stringArray0[3] = "0OVY.M2:#[2)cN0";
      stringArray0[4] = "0OVY.M2:#[2)cN0";
      Whitelist whitelist1 = whitelist0.addProtocols("0OVY.M2:#[2)cN0", "quirks", stringArray0);
      whitelist1.addAttributes("0OVY.M2:#[2)cN0", stringArray0);
      Document document0 = Document.createShell("abbr");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("0OVY.M2:#[2)cN0", "0OVY.M2:#[2)cN0", attributes0);
      boolean boolean0 = whitelist1.isSafeAttribute("0OVY.M2:#[2)cN0", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", currentElement=";
      stringArray0[1] = ", currentElement=";
      stringArray0[2] = ", currentElement=";
      stringArray0[3] = ", currentElement=";
      stringArray0[4] = ", currentElement=";
      Whitelist whitelist1 = whitelist0.addProtocols(", currentElement=", ", currentElement=", stringArray0);
      whitelist1.addAttributes(", currentElement=", stringArray0);
      Document document0 = Document.createShell("abbr");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(", currentElement=", ", currentElement=", attributes0);
      boolean boolean0 = whitelist1.isSafeAttribute(", currentElement=", document0, attribute0);
      assertEquals(", currentElement=", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0OVY.M2:#[2)cN0";
      stringArray0[1] = "0OVY.M2:#[2)cN0";
      stringArray0[2] = "0OVY.M2:#[2)cN0";
      stringArray0[3] = "0OVY.M2:#[2)cN0";
      stringArray0[4] = "0OVY.M2:#[2)cN0";
      whitelist0.addAttributes("0OVY.M2:#[2)cN0", stringArray0);
      Document document0 = Document.createShell("abbr");
      Attribute attribute0 = Attribute.createFromEncoded("abbr", "0OVY.M2:#[2)cN0");
      boolean boolean0 = whitelist0.isSafeAttribute("0OVY.M2:#[2)cN0", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", currentElement=";
      stringArray0[1] = ", currentElement=";
      stringArray0[2] = ", currentElement=";
      stringArray0[3] = ", currentElement=";
      stringArray0[4] = ", currentElement=";
      whitelist0.addAttributes(", currentElement=", stringArray0);
      boolean boolean0 = whitelist0.isSafeTag(", currentElement=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      boolean boolean0 = whitelist0.isSafeTag("org.jsoup.safety.Whitelist$TypedValue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cite";
      stringArray0[1] = "cite";
      stringArray0[2] = "cite";
      stringArray0[3] = ";I'yFgo&@.HYsg@";
      stringArray0[4] = "cite";
      stringArray0[5] = "cite";
      Whitelist whitelist1 = whitelist0.removeProtocols("cite", "cite", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0OVY.M2:#[2)cN0";
      stringArray0[1] = "0OVY.M2:#[2)cN0";
      stringArray0[2] = "0OVY.M2:#[2)cN0";
      stringArray0[3] = "0OVY.M2:#[2)cN0";
      stringArray0[4] = "0OVY.M2:#[2)cN0";
      whitelist0.addProtocols("0OVY.M2:#[2)cN0", "quirks", stringArray0);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("0OVY.M2:#[2)cN0", "0OVY.M2:#[2)cN0", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g\"g";
      stringArray0[1] = "g\"g";
      stringArray0[2] = "g\"g";
      stringArray0[3] = "g\"g";
      stringArray0[4] = "g\"g";
      Whitelist whitelist1 = whitelist0.addProtocols("g\"g", "g\"g", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols("g\"g", "g\"g", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("org.jsoup.safety.Whitelist$TypedValue", "0OVY.M2:#[2)cN0", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".$;C8kQVqWw.";
      stringArray0[1] = ".$;C8kQVqWw.";
      Whitelist whitelist1 = whitelist0.addProtocols(".$;C8kQVqWw.", ".$;C8kQVqWw.", stringArray0);
      Whitelist whitelist2 = whitelist1.addProtocols(".$;C8kQVqWw.", ".$;C8kQVqWw.", stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", currentElement=";
      stringArray0[1] = ", currentElement=";
      stringArray0[2] = ", currentElement=";
      stringArray0[3] = ", currentElement=";
      stringArray0[4] = ", currentElement=";
      Whitelist whitelist1 = whitelist0.addProtocols(", currentElement=", ", currentElement=", stringArray0);
      whitelist1.addProtocols(", currentElement=", "abbr", stringArray0);
      Whitelist whitelist2 = whitelist1.removeProtocols(", currentElement=", ", currentElement=", stringArray0);
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("jW[Y6Qp)x", "jW[Y6Qp)x", "jW[Y6Qp)x");
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("jW[Y6Qp)x", "action");
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.select.Collector$FirstFinder", "y=T:55st1", ">'");
      Whitelist whitelist2 = whitelist0.removeEnforcedAttribute("org.jsoup.select.Collector$FirstFinder", "y=T:55st1");
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "y=T:55st1";
      stringArray0[1] = "y=T:55st1";
      stringArray0[2] = "org.jsoup.select.Collector$FirstFinder";
      stringArray0[3] = "y=T:55st1";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("org.jsoup.select.Collector$FirstFinder", "y=T:55st1");
      assertSame(whitelist2, whitelist0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("p", "GX9PaeTE4!L0Mj*_qJq");
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      whitelist0.addEnforcedAttribute("L&+K@Q>*G`8=UX,", "h5", "yNq!x&6");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("L&+K@Q>*G`8=UX,", "rel", "tr");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = "$_-$K)o$A<DqELa";
      stringArray0[2] = "LG";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = "LG";
      whitelist0.addAttributes("BogusComment", stringArray0);
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "y=T:55st1";
      stringArray0[1] = "y=T:55st1";
      stringArray0[2] = "org.jsoup.select.Collector$FirstFinder";
      stringArray0[3] = "y=T:55st1";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist0.removeAttributes("y=T:55st1", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", currentElement=";
      stringArray0[1] = ", currentElement=";
      stringArray0[2] = ", currentElement=";
      stringArray0[3] = ", currentElement=";
      stringArray0[4] = ", currentElement=";
      Whitelist whitelist1 = whitelist0.addAttributes(", currentElement=", stringArray0);
      Whitelist whitelist2 = whitelist1.removeAttributes(", currentElement=", stringArray0);
      assertSame(whitelist0, whitelist2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes(" |", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'l7y";
      stringArray0[1] = "'l7y";
      stringArray0[2] = "'l7y";
      stringArray0[3] = "'l7y";
      stringArray0[4] = "~6+~|";
      stringArray0[5] = "'l7y";
      stringArray0[6] = "'l7y";
      whitelist0.addAttributes("'l7y", stringArray0);
      Whitelist whitelist1 = whitelist0.addAttributes("'l7y", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("a", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rt";
      stringArray0[1] = "rt";
      stringArray0[2] = "rt";
      stringArray0[3] = "rt";
      stringArray0[4] = "rt";
      stringArray0[5] = "rt";
      stringArray0[6] = "rt";
      stringArray0[7] = "rt";
      stringArray0[8] = "rt";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "table";
      stringArray0[1] = "table";
      stringArray0[2] = "table";
      stringArray0[3] = "table";
      Whitelist whitelist1 = whitelist0.removeAttributes("ul", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("rt", "rt", "=1o.sE-Ge16S+V^q{7");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("=1o.sE-Ge16S+V^q{7", parseSettings0);
      Attributes attributes0 = whitelist1.getEnforcedAttributes("=rZvnVC[@");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "rt", attributes0);
      Attribute attribute0 = Attribute.createFromEncoded("rt", "rt");
      whitelist1.isSafeAttribute("rt", pseudoTextElement0, attribute0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "OHvP_heb";
      stringArray0[1] = "b";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      assertSame(whitelist1, whitelist0);
  }
}
