/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 02:45:33 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("1>AB?8$vFq");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document0.html(pipedWriter0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("1>AB?8$vFq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Document.createShell("b0-.|:");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 1607, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("te/itarFO");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "te/itarFO", attributes0);
      pseudoTextElement0.appendElement("sup");
      String string0 = pseudoTextElement0.toString();
      assertEquals("te/itarFO", pseudoTextElement0.baseUri());
      assertEquals("<sup></sup>", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("map");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "map", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "map");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      formElement0.outerHtmlHead(stringBuilder0, (-1630803092), document_OutputSettings0);
      assertEquals("map<map>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.appendElement("sup");
      String string0 = pseudoTextElement0.toString();
      assertEquals("textarea", pseudoTextElement0.baseUri());
      assertEquals("<sup></sup>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(":\"*!Ii$Et`)M^*,");
      StringWriter stringWriter0 = new StringWriter(19);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(bufferedWriter0, 19, document_OutputSettings1);
      assertEquals(":\"*!Ii$Et`)M^*,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.val();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>", attributes0);
      formElement0.toggleClass("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>");
      formElement0.hasClass("Za7");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tJD/):*NMe3#Eate", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "tJD/):*NMe3#Eate", attributes0);
      Element element1 = element0.html("#8><!KI_v@ak$6");
      element1.data();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.data();
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>", attributes0);
      formElement0.html("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>");
      boolean boolean0 = formElement0.hasText();
      assertEquals(4, formElement0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("b0-.|:");
      Element element0 = document0.text("b0-.|:");
      boolean boolean0 = element0.hasText();
      assertEquals("b0-.|:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("1*Fsc");
      Element element1 = element0.prependText("1*Fsc");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element1;
      element0.addChildren(nodeArray0);
      element1.getElementsMatchingOwnText("IOk~oQb@U $mG.vK*");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      Element element0 = pseudoTextElement0.val("org.jsoup.nodes.Element$2");
      String string0 = element0.toString();
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1*Fsc", false);
      boolean boolean0 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell(")2]ED");
      document0.prependText(")2]ED");
      document0.text();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell("`yk;(");
      Element element0 = document0.getElementById("=*t(s4m");
      assertEquals("`yk;(", document0.baseUri());
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Document.createShell("b0-.|:");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.getElementsByIndexEquals(2);
      assertEquals("b0-.|:", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("p#` [uW*K(");
      document0.appendTo(document0);
      document0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("50e$VJ!w!VY63");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("50e$VJ!w!VY63", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(">");
      document0.previousElementSibling();
      assertEquals(">", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("50e$VJ!w!VY63");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("?");
      document0.nextElementSibling();
      assertEquals("?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("NpPd}3l;7!vzj|A`$-");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("NpPd}3l;7!vzj|A`$-", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("p#` [uW*K(");
      Element element0 = document0.toggleClass("p#` [uW*K(");
      element0.cssSelector();
      assertEquals("p#` [uW*K(", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(30, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Sce<>BRDeG");
      CDataNode cDataNode0 = new CDataNode("59rK(@f=mI");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "gIl;tMg2", attributes0);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        element0.insertChildren((-1452483254), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("j'8Hx-");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-15), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Document.createShell("j'8Hx-");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
      assertEquals("j'8Hx-", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tJD/):*NMe3#Eate", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "tJD/):*NMe3#Eate", attributes0);
      element0.appendChild(element0);
      List<TextNode> list0 = element0.textNodes();
      assertEquals("tJD/):*NMe3#Eate", element0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tJD/):*NMe3#Eate", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "tJD/):*NMe3#Eate", attributes0);
      element0.html("bgsound");
      element0.textNodes();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      document0.append(",.aR<R>r[");
      // Undeclared exception!
      try { 
        document0.child(1193);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1193, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Elements elements0 = element0.parents();
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("@6~]2fy24a", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      Elements elements0 = element0.getElementsByIndexGreaterThan((byte)102);
      assertEquals(0, elements0.size());
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(">");
      // Undeclared exception!
      try { 
        document0.selectFirst("?;J`eclu");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '?;J`eclu': unexpected token at '?;J`eclu'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.removeClass("");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("n[RN");
      // Undeclared exception!
      try { 
        document0.before("audio");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Element element0 = new Element("?#%>+a;`XIUTrij,X");
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document(">");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      document0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Element element0 = new Element("F!/y}r");
      Element element1 = element0.shallowClone();
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Document.createShell(")2]ED");
      document0.setBaseUri("tY,\"v2.YI11_FUuM*");
      assertEquals("tY,\"v2.YI11_FUuM*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = Document.createShell("b0-.|:");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("p#` [uW*K(");
      document0.getElementsByAttributeValueContaining("@P>!hn)Ba", "  #f-RA#>x?S 8Bz1DV");
      assertEquals(1, document0.childNodeSize());
      assertEquals("p#` [uW*K(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Element element0 = new Element("1*Fsc");
      Elements elements0 = element0.getElementsContainingText("[^%s]");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = new Document("%28[X<=<N!'Ej");
      Elements elements0 = document0.getElementsByClass("%28[X<=<N!'Ej");
      assertEquals("%28[X<=<N!'Ej", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell(".#hr(Y");
      document0.getElementsByAttributeValueEnding(".#hr(Y", ".#hr(Y");
      assertEquals(1, document0.childNodeSize());
      assertEquals(".#hr(Y", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("%28[X<=<N!'Ej");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueMatching("", "");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.val("d'u<");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document document0 = Document.createShell("b0-.|:");
      Elements elements0 = document0.getElementsByIndexEquals(2);
      // Undeclared exception!
      try { 
        document0.insertChildren(52, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>", attributes0);
      formElement0.getElementsByAttributeStarting("K_L<*{@-!*}(qmK(,");
      assertEquals("<html>\n <head></head>\n <body>\n  b0-.|:\n </body>\n</html>", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document document0 = Document.createShell("n[RN");
      Elements elements0 = document0.getElementsByIndexLessThan((-4537));
      assertEquals(1, document0.childNodeSize());
      assertEquals("n[RN", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Document$OutputSettings$Syntax");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document document0 = Document.createShell("1GW<p:\"o{-w9n^U");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prepend("");
      assertEquals("1GW<p:\"o{-w9n^U", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document document0 = Document.createShell("j'8Hx-");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("nth-last-of-type", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Document.createShell(")2]ED");
      Element element0 = document0.attr("V<neD$p)HxkAtw;", false);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(")2]ED", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Element element0 = new Element("F!/y}r");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8upd=s0dB", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "8upd=s0dB", attributes0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      // Undeclared exception!
      try { 
        formElement0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|r]z<q#_c/D?m");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.addClass("_m''<R6<aoh|2GdI");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Element element0 = new Element("1*Fsc");
      Elements elements0 = element0.getElementsContainingOwnText("1*Fsc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("%28[X<=<N!'Ej");
      document0.dataset();
      assertEquals("%28[X<=<N!'Ej", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Element element0 = new Element("F!/y}r");
      Element element1 = element0.tagName("F!/y}r");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingText("");
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Document document0 = new Document("org.jsoup.UncheckedIOException");
      document0.appendText("= $%2cd");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(">");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ">", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.wrap(":t5V*<$FAV55N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
