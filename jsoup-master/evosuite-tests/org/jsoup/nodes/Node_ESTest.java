/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 02:49:10 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStreamWriter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Element element0 = document0.prependElement("$F2jd");
      Element element1 = element0.clone();
      Element element2 = element0.shallowClone();
      boolean boolean0 = element1.hasSameValue(element2);
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o");
      Element element0 = new Element(tag0, "", (Attributes) null);
      boolean boolean0 = element0.hasSameValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("name");
      DataNode dataNode0 = new DataNode("\n<!--name-->");
      boolean boolean0 = document0.hasSameValue(dataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("NJd40tXvsc5;hGE=q4C");
      Document document1 = document0.normalise();
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("gA_ Pe");
      Element element0 = document0.shallowClone();
      boolean boolean0 = element0.equals(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("~\"V");
      document0.setParentNode(document0);
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("gA_ Pe");
      Node node0 = document0.previousSibling();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("&nM$wX]buO&H");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      Node node0 = element0.previousSibling();
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("name", "name");
      List<Node> list0 = comment0.siblingNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      List<Node> list0 = document0.siblingNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("autofocus", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "autofocus", attributes0);
      Document document0 = Document.createShell("=:2Z");
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("#data");
      document0.reparentChild(document0);
      Element element0 = document0.clone();
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document("#data");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell(";:@PJ)M*@30cY?");
      // Undeclared exception!
      try { 
        document0.wrap(";:@PJ)M*@30cY?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("name");
      Element element0 = document0.head();
      Node node0 = element0.wrap("#text");
      assertTrue(node0.hasParent());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      Node node0 = xmlDeclaration0.wrap("<??>");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("name");
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("gA_ Pe");
      String string0 = document0.absUrl("gA_ Pe");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("xmlns", "xmlns");
      String string0 = comment0.absUrl("#comment");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("NJd40tXvsc5;hGE=q4C");
      document0.addClass("gpq@.HWgTvy");
      Document document1 = (Document)document0.clearAttributes();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("$F2ukd");
      boolean boolean0 = document0.hasAttr("abs:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Element element0 = new Element("$F2jd");
      // Undeclared exception!
      try { 
        element0.attr("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("name", "name");
      Document document0 = Document.createShell("name");
      Element element0 = document0.head();
      element0.after((Node) comment0);
      comment0.after("&s~4sjwTlqz");
      assertTrue(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml((Appendable) stringBuilder0);
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body></body>\n </html>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("MFe _sj#D,TjN", "a", "a", "a", "MFe _sj#D,TjN");
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        documentType0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      Node node0 = documentType0.removeAttr("2Z] avz[oGgg");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("1");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("su.z", "org.jsoup.nodes.Node$1", "su.z", "org.jsoup.nodes.Node$1", "j<s");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE su.z org.jsoup.nodes.Node$1 \"su.z\" \"org.jsoup.nodes.Node$1\">", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#data", "#data");
      MockFileWriter mockFileWriter0 = new MockFileWriter("#data");
      textNode0.html((OutputStreamWriter) mockFileWriter0);
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comment comment0 = new Comment("", (String) null);
      Node node0 = comment0.shallowClone();
      assertNotNull(node0);
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, comment0);
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("name");
      Element element0 = document0.head();
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      element0.unwrap();
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node$1", "org.jsoup.nodes.Node$1");
      dataNode0.setBaseUri("A");
      assertFalse(dataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
