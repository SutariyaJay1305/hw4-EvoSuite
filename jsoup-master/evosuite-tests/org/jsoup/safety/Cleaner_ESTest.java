/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 02:40:21 GMT 2024
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("3<IO^Gqdv>7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("W6(!9<Cc)Om!ks1=h:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("org.jsoup.nodes.PseudoTextElement");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("org.jsoup.safety.Cleaner$1");
      document0.title("");
      boolean boolean0 = cleaner0.isValid(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell(".c&b<!8=zb1");
      boolean boolean0 = cleaner0.isValid(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("org.jsoup.safety.Cleaner");
      Document document1 = cleaner0.clean(document0);
      Document document2 = cleaner0.clean(document1);
      assertEquals(1, document2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml(".c&b<!8=zb1");
  }
}
