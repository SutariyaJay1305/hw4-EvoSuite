/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 02:47:05 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(3010);
      stringBuilder0.append("            ");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      stringBuilder0.append(false);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(36);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringWriter stringWriter0 = new StringWriter(0);
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringWriter0, 0, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.prependText("");
      String string0 = ((Document) element0).outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("I<");
      document0.title("eYjspLtOYsOmUTW");
      String string0 = document0.toString();
      assertEquals("<html>\n <head>\n  <title>eYjspLtOYsOmUTW</title>\n </head>\n <body></body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("6y4*'2G", "~m~VLj");
      textNode0.siblingIndex = (-260);
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("6y4*'2G", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode("Jn@y*.fU", "Jn@y*.fU");
      StringBuffer stringBuffer0 = new StringBuffer(49);
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuffer0, 24576, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("fF#{..E@b{O@opX");
      cDataNode0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        cDataNode0.splitText(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("{POvl~N>4D--?2|Ao");
      // Undeclared exception!
      try { 
        textNode0.splitText(508);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("Split offset must not be greater than current text length", "Split offset must not be greater than current text length");
      TextNode textNode1 = textNode0.splitText(0);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("y");
      // Undeclared exception!
      try { 
        textNode0.splitText((-1987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("d>R ]AT`L73=S/", "d>R ]AT`L73=S/");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, (-609), document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("^s+");
      String string0 = textNode0.text();
      assertEquals("^s+", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("AG%_oy]OHW");
      assertEquals("AG%_oy]OHW", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("I<");
      Element element0 = document0.prependText("I<");
      String string0 = element0.toString();
      assertEquals("I&lt;\n<html>\n <head></head>\n <body></body>\n</html>", string0);
  }
}
