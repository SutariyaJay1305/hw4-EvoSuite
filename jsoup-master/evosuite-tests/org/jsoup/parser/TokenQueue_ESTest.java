/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 19 03:10:28 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_fT");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("`[PQEalsg@)");
      String string0 = tokenQueue0.consumeAttributeKey();
      assertEquals('`', tokenQueue0.peek());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("W-CxAC()'zYo");
      tokenQueue0.consumeCssIdentifier();
      assertEquals('(', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("twoa@e&YrdI|zp*X]");
      tokenQueue0.consumeWord();
      assertEquals('@', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("m_CB?5Ee?Z\\X-\"o^6q");
      assertEquals("m_CB?5Ee?ZX-\"o^6q", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      Character character0 = Character.valueOf('*');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('*', '*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '*|'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("m_CB?5Ee?ZX-\"o^6q");
      tokenQueue0.addFirst("m_CB?5Ee?ZX-\"o^6q");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('m', 'm');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '_CB?5Ee?ZX-\"o^6qm_CB?5Ee?ZX-\"o^6q'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("m_CB?5Ee?ZO9'X-\"o^6q");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('m', 'm');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '_CB?5Ee?ZO9'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"H 4|ut^q(HxR@;q'");
      tokenQueue0.addFirst("\"H 4|ut^q(HxR@;q'");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'H 4|ut^q(HxR@;q'\"H 4|ut^q(HxR@;q''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"H ut^q(HxR@;q'");
      Character character0 = new Character('A');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('A', 'A');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'S");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'S'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("m_CB?5Ee?Z\\X-\"o^6q");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('m', 'm');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '_CB?5Ee?Z\\X-'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.chompBalanced(']', '3');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("TE'mGzEqV");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "X=_/D#+Qtj";
      stringArray0[1] = "TE'mGzEqV";
      tokenQueue0.consumeToAny(stringArray0);
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("`[PQEalsg@)");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("V/gf}slv$umjCD#__");
      tokenQueue0.chompToIgnoreCase("/:s(v)#BxZiPWM");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";]\"<dy,-T:;");
      tokenQueue0.chompToIgnoreCase(",");
      assertEquals("-T:;", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0/^0+6[O'B");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("            ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.consume("");
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";]\"<dy,-T:;");
      tokenQueue0.advance();
      assertEquals("]\"<dy,-T:;", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.remainder();
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(boolean0);
      assertEquals('Q', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<Al4B@0at*R");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<:l4B@0at*R");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Dt");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.consumeTagName();
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("not long enough to consume sequence", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("*|");
      tokenQueue0.matchChomp("*|");
      assertEquals("", tokenQueue0.toString());
      
      boolean boolean0 = tokenQueue0.matchesAny((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeTagName();
      assertEquals("", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompTo("_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      tokenQueue0.consumeElementSelector();
      assertEquals(" not long enough to consume sequence", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertTrue(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Queue not long enough to consume sequence");
      char char0 = tokenQueue0.peek();
      assertEquals('Q', char0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      Character character0 = Character.valueOf('a');
      tokenQueue0.addFirst(character0);
      assertEquals("a", tokenQueue0.toString());
      
      tokenQueue0.chompBalanced('Y', 'a');
      assertTrue(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                   ");
      tokenQueue0.consumeToIgnoreCase("t`Uk>rP");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                   ");
      String string0 = tokenQueue0.toString();
      assertEquals("                   ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                   ");
      tokenQueue0.chompTo("");
      assertEquals("                   ", tokenQueue0.toString());
  }
}
